package test;

/**
 * 66. 加一【简单】
 * 给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。
 *
 * 最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。
 *
 * 你可以假设除了整数 0 之外，这个整数不会以零开头。
 *
 * 示例 1:
 *
 * 输入: [1,2,3]
 * 输出: [1,2,4]
 * 解释: 输入数组表示数字 123。
 * 示例 2:
 *
 * 输入: [4,3,2,1]
 * 输出: [4,3,2,2]
 * 解释: 输入数组表示数字 4321。
 *
 * https://leetcode-cn.com/problems/plus-one/
 *
 * @Author: Song Ningning
 * @Date: 2020-04-27 13:48
 */
public class PlusOne_66 {

    public int[] plusOne(int[] digits) {

        // 信息：数组非空，元素非负，元素只是单个数字，零不在开头，加一操作
        // 由于元素只是单个数字，且只进行加一操作，因此情况最后一位可以分为 == 9 或者 != 9 的情况。
        // 如果最后一位 != 9，那么加一后 mod(10)，肯定不为零，此时直接返回；
        // 反之，最后一位是 9，加一后 mod(10)，为零，还要依次对前面的数进行加一判断，再 mod(10)，如果不为零，返回；如果为零，继续判断。
        // 特殊情况如果判断到头了还是进位，那么这种情况是全 9，那么直接新建一个 len + 1 长度的数组，首位置 1，返回新数组。

        int len = digits.length;
        for (int i = len - 1; i >= 0; i--) {
            digits[i] += 1;
            digits[i] %= 10;
            if (digits[i] != 0) {
                return digits;
            }
        }
        // 如果能执行到这里，说明数组第一个数是 9，而且还需要 +1 进位，直接开新数组
        digits = new int[len + 1];
        digits[0] = 1;
        return digits;

    }
}
